{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","changed","App","state","inputChangeHandler","event","setState","searchField","target","value","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAaeA,G,YAVF,SAAAC,GACT,OACA,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACvB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,YCQOC,G,MAZE,SAAAR,GACb,OACI,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCKxBM,G,MAXG,SAAAX,GACd,OACI,uBACAC,UAAU,SACVW,KAAO,SACPC,YAAc,yBACdC,SAAWd,EAAMe,YC+BVC,E,4MAlCbC,MAAQ,CACNR,SAAW,I,EAYbS,mBAAqB,SAAAC,GACnB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,S,kEAVvB,IAAD,OAClBC,MAAM,+CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAC3BX,SAAWmB,EACXP,YAAc,U,+BAQP,IAAD,EAE0BQ,KAAKZ,MAA/BR,EAFA,EAEAA,SAAUY,EAFV,EAEUA,YACZS,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASZ,EAAYW,kBAGlD,OACE,sBAAK/B,UAAU,MAAf,UACG,mDACD,cAAC,EAAD,CAAWc,QAASc,KAAKX,qBACzB,cAAC,EAAD,CAAUT,SAAUqB,W,GA7BVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dcf33a60.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nconst Card = props => {\r\n    return (\r\n    <div className='card-container'>\r\n        <img alt=\"monsters\" src={`https://robohash.org/${props.monster.id}?set=set2`} />\r\n        <h1> {props.monster.name} </h1>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../card/card';\r\nimport './card-list.css';\r\n\r\nconst CardList = props => {\r\n    return (\r\n        <div className='card-list'>\r\n            {\r\n                props.monsters.map(monster => (\r\n                    <Card key={monster.id} monster={monster} />\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './search-box.css';\r\n\r\nconst SearchBox = props => {\r\n    return (\r\n        <input\r\n        className='search'\r\n        type = 'search'\r\n        placeholder = 'Input your search Term'\r\n        onChange={ props.changed }\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import './App.css';\nimport React, { Component } from 'react';\nimport CardList from './components/card-list/card-list';\nimport SearchBox from './components/search-box/search-box';\n\nclass App extends Component {\n  state = {\n    monsters : []\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users/')\n    .then(response => response.json())\n    .then(users => this.setState({\n      monsters : users,\n      searchField : ''\n    }))\n  }\n \n  inputChangeHandler = event => {\n    this.setState({ searchField: event.target.value })\n  }\n\n  render () {\n\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return (\n      <div className=\"App\">\n         <h1> Monster Rolodex </h1>\n        <SearchBox changed={this.inputChangeHandler} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}